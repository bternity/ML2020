{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "w1 = np.array([[1,0],[0,1],[0,-1]])\n",
    "w2 = np.array([[0,0],[0,2],[0,-2],[-2,0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['font.sans-serif']=['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "#matplotlib画图中中文显示会有问题，需要这两行设置默认字体\n",
    "\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('Y')\n",
    "\n",
    "colors1 = '#00CED1' #点的颜色\n",
    "colors2 = '#DC143C'\n",
    "area = np.pi * 4**2  # 点面积 \n",
    "\n",
    "plt.scatter(w1[:,0],w1[:,1], s=area, c=colors1, alpha=0.4, label='w1')\n",
    "plt.scatter(w2[:,0],w2[:,1], s=area, c=colors2, alpha=0.4, label='w2')\n",
    "\n",
    "plt.plot([-0.5,-0.5],[0.5,0.5],linewidth = '0.5',color='#000000')\n",
    "\n",
    "\n",
    "plt.savefig(r'C:\\Users\\13969\\Desktop\\研究生课程\\秋\\模式识别\\课件\\3.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "star_point=-6\n",
    "end_point =8\n",
    "h=0.21\n",
    "x = np.arange(star_point,end_point,h)\n",
    "y = np.zeros(int((end_point-star_point)/h))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0,np.size(x)-1):  \n",
    "    if x[i] <-4 :\n",
    "        y[i]= 1/(6*(-4-x[i]))        \n",
    "    if x[i] <-2:\n",
    "        y[i]=1/(-6*(-4-x[i]))    \n",
    "    if x[i] < 0:\n",
    "        y[i]=1/(-6*x[i])        \n",
    "    if x[i] < 3:\n",
    "        y[i]=1/(6*x[i])        \n",
    "    if x[i] < 6:\n",
    "        y[i]=1/(6*(6-x[i]))        \n",
    "    y[i]=1/(-6*(6-x[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['font.sans-serif']=['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "#matplotlib画图中中文显示会有问题，需要这两行设置默认字体\n",
    "\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('$p_n(x)$')\n",
    "\n",
    "colors1 = '#00CED1' #点的颜色\n",
    "colors2 = '#DC143C'\n",
    "area = np.pi * 4**2  # 点面积 \n",
    "\n",
    "plt.plot(x[0:66],y)\n",
    "\n",
    "plt.savefig(r'C:\\Users\\13969\\Desktop\\研究生课程\\秋\\模式识别\\课件\\4.png', dpi=300)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
